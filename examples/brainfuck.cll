(defn brainfuck [source]
  (map (fn [c]
    (cond
      (= c ">") (b-adv)
      (= c "<") (b-dev)
      (= c "+") (b-inc)
      (= c "-") (b-dec)
      (= c ".") (b-put)
      (= c ",") (b-get)
      (= c "[") (if b-cond brainfuck)
    )
  
  ))
  (let { fragments (map ) })
  (let* ((fragments
          (map 'list
               (lambda (c)
                 (case c
                   (#\> "(incptr 1)")
                   (#\< "(decptr 1)")
                   (#\+ "(incval 1)")
                   (#\- "(decval 1)")
                   (#\. "(putchar)")
                   (#\, "(getchar)")
                   (#\[ "(while")
                   (#\] ")")))
               source))
         (code (apply #'concatenate 'string fragments)))
    (read-from-string (format nil "(~A)" code))))

(defun optimize-brainfuck (forms)
  (let* ((form (pop forms))
         (tag (car form)))
    (case tag
      ((incptr decptr incval decval)
       (loop with arg = (cadr form)
             while (eq tag (caar forms))
             do (incf arg (cadr (pop forms)))
             finally
          (return `((,tag ,arg) ,@(optimize-brainfuck forms)))))
      ((putchar getchar)
       (cons form (optimize-brainfuck forms)))
      (while
       (let* ((body (cdr form))
              (optimized (optimize-brainfuck body)))
         `((while ,@optimized) ,@(optimize-brainfuck forms)))))))

(defun brainfuck->lisp (forms)
  (when forms
    (let* ((form (pop forms))
           (tag (car form)))
      (cons (case tag
              (incptr `(setq ptr (+ ptr ,(cadr form))))
              (decptr `(setq ptr (- ptr ,(cadr form))))
              (incval `(setf (aref ary ptr) (ldb (byte 8 0) (+ (aref ary ptr) ,(cadr form)))))
              (decval `(setf (aref ary ptr) (ldb (byte 8 0) (- (aref ary ptr) ,(cadr form)))))
              (putchar '(write-char (code-char (aref ary ptr))))
              (getchar '(setf (aref ary ptr) (char-code (read-char))))
              (while `(tagbody
                        next
                        (if (zerop (aref ary ptr)) (go end))
                        ,@(brainfuck->lisp (cdr form))
                        (go next)
                        end)))
            (brainfuck->lisp forms)))))

(defun brainfuck-env (forms)
  `(let ((ptr 0)
         (ary (make-array 30000
                          :element-type '(unsigned-byte 8)
                          :initial-element 0)))
     (declare (fixnum ptr))
     ,@forms))

(defun compile-brainfuck (source)
  (brainfuck-env (brainfuck->lisp (optimize-brainfuck (string->brainfuck source)))))

(defmacro defbrainfuck (name source)
  `(defun ,name ()
     (declare (optimize (speed 3) (safety 0) (space 0)))
     ,(compile-brainfuck source)))