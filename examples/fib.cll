(defn fib [n]
  (cond
    (= n 0) 0
    (= n 1) 1
    :else   (+ (fib (- n 1)) (fib (- n 2)))))

(defn ifib [n]
  (let { t1   (ref 0)
         t2   (ref 1)
         next (ref nil)
         i    (ref 1) }
    (while (<= @i n)
      (inc! i)
      (set! next (+ @t1 @t2))
      (set! t1 @t2)
      (set! t2 @next))
    @t1))

(println "(fib 5) = " (fib 5))
(println "(ifib 50) = " (ifib 50))
(println "(fib 30) in " (time-it (fib 30)) "s")