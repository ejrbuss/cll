; Test defmacro
(defmacro my-quote [args] ~''~args)

(assert :equal (my-quote x) 'x)
(assert :not-equal (my-quote my-quote))

; Test defn
(defn id [x] x)

(assert :equal (id 4) 4)
(assert :equal (id nil) nil)
(assert :equal (id [1 2 3 4]) [1 2 3 4])
(assert :not-equal (id 4) 4.1)
(assert :not-equal (id [1 2]) {1 2})

; Test comment
(comment (throw) oops!)

; Test cond
(assert :equal nil (cond :true))
(assert :equal 1 (cond :true 1))
(assert :equal 2 (cond nil 1 :true 2))

; Test For
(assert :equal [1 2 3 4 5] (for x (range 1 6) x))
(assert :equal [1 4 9 16 25] (for x (range 1 6) (* x x)))
(assert :equal 
  [[[1 1] [1 2]] [[2 1] [2 2]]] 
  (for x (range 1 3) (for y (range 1 3) [x y])))

; Test map

; Test filer

; Test reduce

; Closing nil
nil