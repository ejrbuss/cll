;; Test Prelude
;; ------------

; Test defmacro
(defmacro my-quote [args] ~''~args)

(assert :equal (my-quote x) 'x)
(assert :not-equal (my-quote my-quote) nil)

; Test defn
(defn id [x] x)

(assert :equal (id 4) 4)
(assert :equal (id nil) nil)
(assert :equal (id [1 2 3 4]) [1 2 3 4])
(assert :not-equal (id 4) 4.1)
(assert :not-equal (id [1 2]) {1 2})

; Test comment
(comment (throw) oops!)

; Test cond
(assert :equal nil (cond :true))
(assert :equal 1 (cond :true 1))
(assert :equal 2 (cond nil 1 :true 2))

; Test for
(assert :equal [1 2 3 4 5] (for x (range 1 6) x))
(assert :equal [1 4 9 16 25] (for x (range 1 6) (* x x)))
(assert :equal 
  [[[1 1] [1 2]] [[2 1] [2 2]]] 
  (for x (range 1 3) (for y (range 1 3) [x y])))

; Test map
(assert :equal [1 4 9 16 25] (map (fn [n] (* n n)) [1 2 3 4 5]))
(assert :equal ["2a" "2b" "2c"] (map (fn [s] (str "2" s)) "abc"))

; Test filter
(assert :equal [1 3 5 7 9] (filter odd? [1 2 3 4 5 6 7 8 9]))
(assert :equal [2 4 6 8] (filter even? [1 2 3 4 5 6 7 8 9]))
(assert :equal [3 2 1] (filter number? { :a 1 :b 2 :c 3 }))

; Test reduce
(assert :equal 10 (reduce + 0 [1 2 3 4]))
(assert :equal "abc" (reduce (fn [s c] (str s (num-to-ascii c))) "" [97 98 99]))

; Test range
(assert :equal [1 2 3 4] (range 1 5))
(assert :equal [2 4 6 8] (range 2 10 2))
(assert :equal [4 3 2 1] (range 4 0))
(assert :equal [10 7 4 1] (range 10 0 -3))

; Test curry

; Test apply!

; Test !=

; Test str-join

;; Test Example Files code
;; -----------------------

(defn fib [n]
  (cond
    (= n 0) 0
    (= n 1) 1
    :else   (+ (fib (- n 1)) (fib (- n 2)))))

(defn ifib [n]
  (let { t1   (ref 0)
         t2   (ref 1)
         next (ref nil)
         i    (ref 1) }
    (while (<= @i n)
      (inc! i)
      (set! next (+ @t1 @t2))
      (set! t1 @t2)
      (set! t2 @next))
    @t1))

(assert :equal (fib 5) (ifib 5) 5)
(assert :equal (fib 10) (ifib 10) 55)

(defn loop [n]
  (let { i (ref 0) }
    (while (< @i n)
      (inc! i))
  @i))

(assert :equal 1e5 (loop 1e5))

(println "\n   bf output:")
(load "examples/bf.cll")

; Closing nil
nil